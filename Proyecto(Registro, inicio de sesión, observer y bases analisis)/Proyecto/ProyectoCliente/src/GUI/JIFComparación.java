/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Domain.ClienteSingleton;
import Domain.Sitio;
import Utility.GestionXML;
import Utility.Observer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.jdom.Element;
import org.jdom.JDOMException;

/**
 *
 * @author Estephanie
 */
public final class JIFComparación extends javax.swing.JInternalFrame implements Observer{

    /**
     * Creates new form JIFComparación
     */
    private ClienteSingleton clienteSingleton;
    private ArrayList<Sitio> sitios;

    public JIFComparación() throws IOException, JDOMException {
        this.sitios = new ArrayList<>();
        initComponents();
        this.clienteSingleton=ClienteSingleton.getInstance();
        this.clienteSingleton.addObserver(this);
        GestionXML gestionXML=new GestionXML();
        this.clienteSingleton.enviarDatos(gestionXML.xmlToString(gestionXML.agregarAccionSimple("AllSitios", "")));
        
    }

    public void agregarDatosTabla() {
        if (!sitios.isEmpty()) {// Verificar si la lista de sitios no está vacía
            String[] columnNames = {"URL", "Producto", "Precio"};//darle nombre a las columnas
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            //obtener cada precio y producto
            for (Sitio sitio : this.sitios) {
                String url = sitio.getUrl();
                Iterator<String> productosIterator = sitio.getProductos().iterator();
                Iterator<String> preciosIterator = sitio.getPrecios().iterator();

                while (productosIterator.hasNext() || preciosIterator.hasNext()) {
                    // Agregar fila si hay productos y precios
                    if (productosIterator.hasNext() && preciosIterator.hasNext()) {
                        String nombreProducto = productosIterator.next();
                        String precio = preciosIterator.next();
                        model.addRow(new Object[]{url, nombreProducto, precio});

                    } else if (!productosIterator.hasNext()) { //Si hay más precios pero no prooductos
                        String precio = preciosIterator.next();
                        model.addRow(new Object[]{url, " ", precio});

                    } else if (!preciosIterator.hasNext()) {//si hay más productos pero no precios
                        String nombreProducto = productosIterator.next();
                        model.addRow(new Object[]{url, nombreProducto, " "});
                    }
                }
            }
            this.jTable1.setModel(model); // Crear la tabla con los datos obtenidos
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbtnVolver = new javax.swing.JButton();

        setTitle("Comparación de productos");
        setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Página:", "Producto", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jbtnVolver.setText("Volver");
        jbtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnVolver)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jbtnVolver)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnVolverActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jbtnVolverActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtnVolver;
    // End of variables declaration//GEN-END:variables
    
     @Override
    public void update(String dato) {
        try {
            GestionXML gestionXML= new GestionXML();
            Element eProtocolo = gestionXML.stringToXML(dato);
            String accion = eProtocolo.getAttributeValue("accion");
            
            if (accion.equals("sitios")) {
                this.sitios=gestionXML.xmlASitios(eProtocolo);
                agregarDatosTabla();
            }

        } catch (JDOMException ex) {
            Logger.getLogger(JIFEstadoTareas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JIFEstadoTareas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
